type family CFL (l :: [a -> Constraint]) (x :: a) :: Constraint
type instance CFL '[] _ = ()
type instance CFL (h ': t) x = (h x, CFL t x)

TypeInType
TypeFamilies
ConstraintKinds
DataKinds
TypeOperators
RankNTypes
KindSignatures
ExistentialQuantification
FlexibleInstances
UndecidableInstances
MultiParamTypeClasses
GADTs

import Data.Kind

----

prefix a = elem a . inits
suffix a = elem a . tails

substring _ [] = False
substring [] _ = True
substring (x : s) (h : t) | x == h = prefix s t
                          | True   = substring (x : s) t

substrings e = filter (flip substring e) $ subsequences e

pragma a = prefix "{-#" a && suffix "#-}" a


ghci.exe -XTypeInType -XTypeFamilies -XConstraintKinds -XDataKinds -XTypeOperators -XRankNTypes -XKindSignatures -XExistentialQuantification -XFlexibleInstances -XUndecidableInstances -XMultiParamTypeClasses -XGADTs


data Sigma (i :: k) (f :: i -> k) :: k where
 Sigma :: i -> f i -> Sigma i f

data Sigma (i :: k) (f :: i -> *) :: * where
 Sigma :: k -> f i -> Sigma i f